const std = {}

require sys;
require immutable
require string
require iterator
require math;
require io
require json

Function.__call=function(x){
        if(typeof x !="function")
                return function(){}
        return x;
}
Number.times = function(x){
        for(var i=0;i<this;++i)
                x(i);
}


const vec_fn = function(times, func) {
        var res = []
        for(var i=0;i<times;++i)
                res[i]=func(i);
        return res;
}

Array.push = function(x){ this[this.length()]=x;}


Array.each = function(aggregate){
  for(var i in this)
    this[i.key]=aggregate(i.value);
}

Object.each = function(aggregate,cond){
  cond = cond || ||true
  for(var i in this){
    if(cond(i.key))
      this[i.key]=aggregate(i.value);
  }
}


Array.insert = function(arr...){
        for (var i = 0; i < arr.length; ++i) {
                @push(arr[i])
        }
}

Object.insert = function(obj){
        if(typeof(obj)!="object")
                return;
        for(var i in obj)
                @[i.key]=i.value;
}

Object.inherit = function(base){
        for(var i in base)
                @[i.key]=i.value;
        @prototype = base.prototype;
}

Array.Clone = function(){
        return Array(this);
}


Array.binary_search = function (x, cmp){
        cmp = cmp || |x,y| x<y;
        var first = 0,last = #this;
        while(first<last){
                var mid = (first+last)/2;
                mid = Math.round(mid-0.5)
                if(this[mid]==x)
                        return mid;
                if(cmp(this[mid],x)){
                        first = mid+1;
                }else{
                        last = mid;
                }
        }
        return -1;
}

Array.bubble_sort = function(cmp){
        cmp = cmp || |x,y| x>y;
        for(var i =0;i<#this-1;++i){
                for(var j=i+1;j<#this;++j){
                        if(cmp(this[i],this[j])){
                                var tmp = this[i];
                                this[i]=this[j];
                                this[j]=tmp;
                        }
                }
        }
        return this;
}

Array.qsort = function (cmp){
        throw new NotImplementedException("Array.qsort");
}

Array.heapsort = function(cmp){
        throw new NotImplementedException("Array.heapsort");
}

Array.stablesort = Array.heapsort;

Array.sort = Array.bubble_sort;

Array.uniq = function(){
        var hash = {}
        var res = []
        for(var i in this){
                if(hash[i.value])
                        continue;
                hash[i.value]=true;
                res.push(i.value);
        }
   //     hash.finallize();
        return res;
}

Array.exist = function(cond){
        if(typeof cond != "function")
                cond = |x| cond == x;
        for(var i in this)
                if(cond(i.value))
                        return true;
}
Array.flat = function(){
        var f = function(x,xs...){
                if(typeof x == "array")
                        return _F(...xs,...x);
                if(xs.exist(|x|typeof x == "array")){
                        return _F(...xs,x);
                }
                return arguments;
        }
        return f(...this).sort();
}



