Registers used:1139
GCRoots:
775
1
2
3
4
5
6
8
9
10
11
12
13
14
15
16
18
19
20
22
23
25
26
28
29
31
32
34
35
37
38
40
41
42
43
44
45
47
48
49
50
51
52
53
54
55
56
58
60
62
64
66
67
68
69
70
71
72
75
76
77
78
80
81
82
83
85
87
89
90
91
92
93
94
95
96
97
99
100
102
104
106
107
108
109
110
111
113
114
115
116
119
121
122
123
124
125
126
129
131
138
139
140
141
142
143
144
146
147
148
149
150
151
152
156
157
158
159
160
161
162
163
165
167
168
170
171
172
174
178
181
183
185
188
189
191
192
193
194
195
196
197
199
205
209
211
213
215
216
217
218
219
220
221
222
226
227
228
229
230
231
232
234
238
239
240
241
242
243
244
245
246
247
248
249
251
252
255
256
257
258
259
260
262
263
264
265
267
268
269
271
272
273
274
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
294
295
296
297
298
299
300
301
304
305
306
307
308
309
310
314
315
316
317
318
319
320
323
325
327
328
329
330
331
332
333
335
336
337
338
339
340
341
342
343
344
345
348
349
350
351
352
353
354
355
357
359
363
367
370
371
372
374
376
377
378
379
380
381
382
383
384
385
386
388
390
391
392
393
394
395
396
397
399
400
402
403
404
405
406
407
409
411
413
416
417
418
419
420
421
422
423
425
427
428
429
430
431
432
433
434
435
436
437
439
443
445
446
447
448
449
450
452
457
460
462
464
465
466
467
468
470
471
473
474
475
476
477
478
479
480
485
487
489
490
494
501
503
504
505
506
507
508
509
510
511
513
516
518
521
523
525
527
529
531
533
537
539
541
542
546
548
549
551
552
553
554
555
556
558
559
560
561
565
567
568
570
571
572
573
574
575
576
577
578
579
584
587
592
593
594
595
596
597
598
599
600
601
603
604
606
607
608
609
610
611
612
613
614
615
618
619
620
621
622
623
624
628
630
633
635
637
641
642
643
644
645
646
647
649
654
655
657
658
660
661
662
663
664
665
667
669
671
673
674
676
678
680
681
683
684
686
687
689
691
692
693
694
696
697
699
700
702
704
705
707
708
709
711
712
714
715
716
718
720
723
724
726
727
728
729
730
731
733
734
735
736
737
738
740
741
742
743
744
745
746
747
750
751
752
753
754
755
756
757
758
760
761
763
764
765
766
767
768
769
770
771
773
775
776
777
778
779
780
781
782
784
786
787
788
789
790
791
792
794
796
798
799
800
801
802
803
804
805
807
808
809
811
816
817
818
819
820
821
822
827
829
830
831
832
833
836
838
840
841
842
843
844
845
846
847
851
852
853
854
855
857
858
859
860
861
862
863
864
865
866
867
870
871
873
876
878
880
882
887
891
892
893
894
895
896
897
898
899
900
903
905
908
913
916
918
919
920
921
922
923
924
926
927
928
929
930
931
932
933
935
936
938
940
941
942
943
944
945
946
947
948
949
953
954
957
960
962
963
964
965
966
967
968
970
972
973
974
975
977
980
981
982
983
984
985
986
987
988
989
991
995
996
997
998
1001
1004
1005
1008
1010
1012
1013
1014
1015
1016
1017
1019
1020
1021
1022
1023
1024
1025
1026
1029
1030
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1047
1049
1051
1053
1055
1057
1058
1059
1061
1062
1064
1066
1067
1068
1071
1073
1074
1075
1076
1077
1078
1079
1081
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1094
1095
1099
1101
1102
1104
1106
1107
1108
1110
1112
1115
1118
1119
1120
1123
1125
1126
1127
1129
1130
1133
1135
1136
1137
-1	load	str	r2	System
-1	load	str	r5	std
-1	load	str	r6	__native__typeof
-1	load	str	r9	__typeof
-1	load	null	r10	null
-1	load	str	r12	_
-1	load	str	r19	typeof$operator
-1	load	str	r20	Number
-1	load	str	r23	String
-1	load	str	r26	Boolean
-1	load	str	r29	Function
-1	load	str	r32	Null
-1	load	str	r35	Object
-1	load	str	r38	Array
-1	load	str	r41	toString
-1	load	str	r45	
-1	load	str	r47	__call
-1	load	null	r55	null
-1	load	str	r56	key
-1	load	str	r58	value
-1	load	str	r60	prototype
-1	load	str	r62	__proto__
-1	load	str	r64	_F
-1	load	null	r85	null
-1	load	str	r87	number
-1	load	num	r89	0
-1	load	null	r99	null
-1	load	str	r100	typeof$operator
-1	load	str	r102	string
-1	load	str	r104	Empty
-1	load	str	r106	finallize
-1	load	str	r111	key
-1	load	str	r113	length
-1	load	str	r119	Userdata
-1	load	bool	r129	true
-1	load	null	r131	null
-1	load	str	r139	__instanceof
-1	load	str	r147	instanceof$operator
-1	load	str	r157	^$operator
-1	load	null	r163	null
-1	load	bool	r165	false
-1	load	str	r168	y
-1	load	str	r172	prototype
-1	load	null	r174	null
-1	load	str	r178	value
-1	load	str	r181	__proto__
-1	load	str	r183	_F
-1	load	str	r185	super
-1	load	str	r188	construct
-1	load	str	r189	prototype
-1	load	str	r192	as$operator
-1	load	null	r197	null
-1	load	str	r199	object
-1	load	null	r205	null
-1	load	str	r209	boolean
-1	load	null	r211	null
-1	load	str	r213	array
-1	load	str	r216	typeid$operator
-1	load	null	r222	null
-1	load	str	r227	=~$operator
-1	load	num	r234	1
-1	load	str	r239	<=>$operator
-1	load	str	r240	RaiseException
-1	load	str	r249	msg
-1	load	str	r251	what
-1	load	str	r252	UserExeption[Raised by Userdata.RaiseException]:
-1	load	str	r255	__tostr
-1	load	str	r256	isUserdata
-1	load	null	r257	null
-1	load	str	r265	
-1	load	str	r274	
-1	load	str	r279	null
-1	load	str	r283	function
-1	load	str	r291	typeof$operator
-1	load	str	r295	objectof$operator
-1	load	null	r300	null
-1	load	str	r301	typeid$operator
-1	load	str	r305	numberof$operator
-1	load	null	r310	null
-1	load	str	r315	booleanof$operator
-1	load	str	r320	typeid$operator
-1	load	str	r323	to_str
-1	load	str	r325	x.to_str
-1	load	str	r328	stringof$operator
-1	load	null	r333	null
-1	load	str	r336	isNull$operator
-1	load	str	r338	Exception
-1	load	str	r348	_F
-1	load	str	r349	_what
-1	load	str	r350	line
-1	load	str	r351	callee
-1	load	str	r352	additionalinfo
-1	load	str	r359	
at line:
-1	load	str	r363	
callee:
-1	load	str	r367	
additional:
-1	load	str	r374	this.what
-1	load	str	r383	_what
-1	load	str	r384	line
-1	load	str	r385	callee
-1	load	str	r386	additionalinfo
-1	load	str	r388	this.construct
-1	load	str	r391	NotImplementedException
-1	load	str	r396	prototype
-1	load	str	r399	__proto__
-1	load	str	r400	super
-1	load	str	r402	construct
-1	load	str	r409	NotImplementedException:
-1	load	str	r411	this.super
-1	load	null	r413	null
-1	load	str	r417	UserException
-1	load	str	r423	Exception
-1	load	str	r425	super
-1	load	str	r427	_F
-1	load	bool	r428	true
-1	load	str	r429	again
-1	load	str	r439	UserException:
-1	load	str	r443	this.construct
-1	load	str	r445	substr
-1	load	num	r452	0
-1	load	null	r457	null
-1	load	str	r460	__native__substr
-1	load	str	r462	System.__native__substr
-1	load	str	r464	charAt
-1	load	num	r470	1
-1	load	str	r471	this.substr
-1	load	str	r473	Empty
-1	load	str	r474	replaceAt
-1	load	num	r480	0
-1	load	str	r485	number
-1	load	str	r487	Incorrect string operation:replaceAt with:
-1	load	str	r489	 and:
-1	load	str	r490	substr
-1	load	str	r511	is_obj
-1	load	str	r513	is_arr
-1	load	str	r516	uditer
-1	load	null	r518	null
-1	load	str	r521	__obj__iter
-1	load	str	r523	System.__obj__iter
-1	load	str	r525	__arr__iter
-1	load	str	r527	System.__arr__iter
-1	load	str	r529	uditer
-1	load	str	r531	valid
-1	load	str	r533	this.uditer.valid
-1	load	str	r537	next
-1	load	str	r539	this.uditer.next
-1	load	str	r542	key
-1	load	str	r546	prototype
-1	load	null	r548	null
-1	load	str	r549	this
-1	load	null	r551	null
-1	load	str	r556	Cannot apply '__del:uditer' in iterator.
-1	load	str	r558	__del:uditer
-1	load	null	r559	null
-1	load	str	r560	key
-1	load	str	r561	typeof$operator
-1	load	str	r565	object
-1	load	str	r567	is_obj
-1	load	str	r568	[expr]
-1	load	str	r571	__iter
-1	load	str	r573	abstract_cmp
-1	load	str	r584	c.length
-1	load	str	r587	_cond
-1	load	str	r593	max
-1	load	null	r603	null
-1	load	str	r604	abstract_cmp
-1	load	str	r607	min
-1	load	str	r618	rand
-1	load	null	r624	null
-1	load	num	r628	0
-1	load	num	r630	32600
-1	load	str	r633	Incorrect rand() args, to lesser then from
-1	load	str	r635	__native__rand
-1	load	str	r637	System.__native__rand
-1	load	str	r647	ln
-1	load	str	r649	this.ln
-1	load	str	r654	log
-1	load	str	r655	__native__atan
-1	load	str	r657	atan
-1	load	str	r658	__native__ceil
-1	load	str	r660	ceil
-1	load	str	r665	round
-1	load	str	r667	lgamma
-1	load	str	r669	this.lgamma
-1	load	str	r671	this.round
-1	load	str	r673	factorial
-1	load	str	r674	__native__lb
-1	load	str	r676	lb
-1	load	str	r678	__native__lg
-1	load	str	r680	lg
-1	load	str	r681	__native__acos
-1	load	str	r683	acos
-1	load	str	r684	__native__ctg
-1	load	str	r686	ctg
-1	load	str	r687	__native__log
-1	load	str	r689	__native__sin
-1	load	str	r691	sin
-1	load	num	r692	2.71828
-1	load	str	r693	E
-1	load	str	r694	__native__asin
-1	load	str	r696	asin
-1	load	str	r697	__native__sqrt
-1	load	str	r699	sqrt
-1	load	str	r700	__native__lgamma
-1	load	str	r702	__native__tg
-1	load	str	r704	tg
-1	load	str	r705	__native__round
-1	load	num	r707	3.14159
-1	load	str	r708	PI
-1	load	str	r709	__native__pow
-1	load	str	r711	pow
-1	load	str	r712	__native__cos
-1	load	str	r714	cos
-1	load	str	r716	Math
-1	load	num	r718	1
-1	load	str	r720	Math.sqrt
-1	load	str	r724	NaN
-1	load	str	r727	Infinity
-1	load	str	r734	isNaN$operator
-1	load	str	r741	isInf$operator
-1	load	str	r742	__call
-1	load	str	r747	typeof$operator
-1	load	str	r753	times
-1	load	null	r760	null
-1	load	str	r761	x
-1	load	num	r770	0
-1	load	str	r773	func
-1	load	str	r776	vec_fn
-1	load	str	r777	push
-1	load	str	r782	length
-1	load	str	r784	this.length
-1	load	null	r786	null
-1	load	str	r787	each
-1	load	str	r794	value
-1	load	str	r796	aggregate
-1	load	null	r808	null
-1	load	str	r809	key
-1	load	str	r811	cond
-1	load	null	r816	null
-1	load	str	r817	insert
-1	load	str	r827	this.push
-1	load	null	r833	null
-1	load	str	r838	value
-1	load	null	r840	null
-1	load	str	r841	inherit
-1	load	str	r847	key
-1	load	str	r851	Clone
-1	load	null	r855	null
-1	load	str	r857	binary_search
-1	load	num	r870	0
-1	load	num	r876	2
-1	load	num	r880	0.5
-1	load	str	r882	Math.round
-1	load	str	r887	cmp
-1	load	str	r891	bubble_sort
-1	load	num	r905	1
-1	load	null	r913	null
-1	load	str	r918	qsort
-1	load	str	r924	Array.qsort
-1	load	str	r926	heapsort
-1	load	str	r932	Array.heapsort
-1	load	str	r933	NotImplementedException
-1	load	null	r935	null
-1	load	str	r936	stablesort
-1	load	str	r938	sort
-1	load	str	r940	uniq
-1	load	str	r949	value
-1	load	bool	r953	true
-1	load	str	r954	push
-1	load	str	r957	res.push
-1	load	str	r960	hash.finallize
-1	load	str	r962	exist
-1	load	null	r967	null
-1	load	str	r968	typeof$operator
-1	load	str	r970	function
-1	load	null	r980	null
-1	load	str	r981	flat
-1	load	str	r991	array
-1	load	str	r1001	xs.exist
-1	load	str	r1005	f
-1	load	str	r1008	[expr].sort
-1	load	str	r1010	Regex
-1	load	str	r1013	hello
-1	load	str	r1017	, 
-1	load	str	r1019	world!
-1	load	str	r1020	obj
-1	load	str	r1026	text
-1	load	str	r1029	

-1	load	str	r1030	total length:
-1	load	str	r1035	method
-1	load	str	r1036	hello, 
-1	load	str	r1037	text
-1	load	str	r1038	variadic
-1	load	str	r1045	Argument#
-1	load	str	r1047	:
-1	load	num	r1049	0
-1	load	null	r1051	null
-1	load	num	r1053	1
-1	load	str	r1055	Userdata.variadic
-1	load	str	r1057	(.*)(Script)(.*)
-1	load	str	r1059	apply
-1	load	str	r1061	JavaScript and ActionScript
-1	load	str	r1062	reg.apply
-1	load	str	r1064	TestClass
-1	load	num	r1066	1.234
-1	load	str	r1067	Userdata.TestClass
-1	load	str	r1071	a
-1	load	num	r1074	3
-1	load	str	r1075	c
-1	load	str	r1076	b
-1	load	str	r1079	argc
-1	load	str	r1081	argv
-1	load	num	r1084	4
-1	load	num	r1085	5
-1	load	str	r1087	arr
-1	load	null	r1089	null
-1	load	str	r1090	1234567890
-1	load	str	r1092	str
-1	load	num	r1094	9
-1	load	str	r1095	str.substr
-1	load	str	r1099	Complex
-1	load	str	r1101	System.Complex
-1	load	str	r1104	StringBuilder
-1	load	str	r1106	System.StringBuilder
-1	load	str	r1108	sb:
-1	load	str	r1110	append
-1	load	str	r1112	sb.append
-1	load	str	r1115	hogn
-1	load	str	r1118	sb.toString
-1	load	str	r1120	typeof$operator
-1	load	str	r1123	Integer
-1	load	num	r1125	123
-1	load	str	r1126	Userdata.Integer
-1	load	num	r1129	3321
-1	load	str	r1133	__ModuleLoad
-1	load	str	r1135	moduletest.nlc
-1	load	str	r1136	System.__ModuleLoad
-1	load	str	r1138	variable
-1	load	str	r1140	__typeof
-1	load	str	r1141	Object
-1	load	str	r1142	Array
-1	load	str	r1143	__instanceof
-1	load	str	r1144	instanceof$operator
-1	load	str	r1145	Exception
-1	load	str	r1146	abstract_cmp

0	objalloc		r3	r0	
1	mov		r4	r3	
2	get		r7	r1	r6
3	mov		r8	r7	
4	mov		r11	r10	
5	func		r13	offs:6	
6	jmp	anyway		offs:15	
7	getarg		r14	
8	argmunets		r15	
9	getarg		r16	
10	clear		
11	pusharg		r16	
12	pusharg		r10	
13	call		r8	r2	
14	pop		r17	
15	ret		r17	r14	
16	mov		r18	r13	
17	get		r21	r1	r20
18	mov		r22	r21	
19	get		r24	r1	r23
20	mov		r25	r24	
21	get		r27	r1	r26
22	mov		r28	r27	
23	get		r30	r1	r29
24	mov		r31	r30	
25	get		r33	r1	r32
26	mov		r34	r33	
27	get		r36	r1	r35
28	mov		r37	r36	
29	get		r39	r1	r38
30	mov		r40	r39	
31	func		r42	offs:32	
32	jmp	anyway		offs:37	
33	getarg		r43	
34	argmunets		r44	
35	clear		
36	concat		r46	r43	r45
37	ret		r46	r43	
38	set		r37	r41	r42
39	set		r28	r41	r42
40	set		r22	r41	r42
41	set		r40	r41	r42
42	func		r48	offs:43	
43	jmp	anyway		offs:68	
44	getarg		r49	
45	argmunets		r50	
46	getarg		r51	
47	clear		
48	objalloc		r52	r0	
49	mov		r53	r52	
50	pusharg		r51	
51	pusharg		r55	
52	call		r0	r2	
53	pop		r54	
54	jmp	if false	r54	offs:61	
55	get		r57	r54	r56
56	get		r59	r54	r58
57	set		r53	r57	r59
58	pusharg		r54	
59	call		r54	r1	
60	pop		r54	
61	jmp	anyway		offs:53	
62	get		r61	r51	r60
63	set		r53	r60	r61
64	get		r63	r51	r62
65	set		r53	r62	r63
66	get		r65	r51	r64
67	set		r53	r64	r65
68	ret		r53	r49	
69	set		r37	r47	r48
70	func		r66	offs:71	
71	jmp	anyway		offs:90	
72	getarg		r67	
73	argmunets		r68	
74	getarg		r69	
75	clear		
76	objalloc		r70	r0	
77	mov		r71	r70	
78	pusharg		r69	
79	pusharg		r55	
80	call		r0	r2	
81	pop		r72	
82	jmp	if false	r72	offs:89	
83	get		r73	r72	r56
84	get		r74	r72	r58
85	set		r71	r73	r74
86	pusharg		r72	
87	call		r72	r1	
88	pop		r72	
89	jmp	anyway		offs:81	
90	ret		r71	r67	
91	set		r40	r47	r66
92	func		r75	offs:93	
93	jmp	anyway		offs:100	
94	getarg		r76	
95	argmunets		r77	
96	getarg		r78	
97	clear		
98	math	!	r79	r78	r0
99	math	!	r79	r79	r0
100	ret		r79	r76	
101	set		r28	r47	r75
102	func		r80	offs:103	
103	jmp	anyway		offs:117	
104	getarg		r81	
105	argmunets		r82	
106	getarg		r83	
107	clear		
108	pusharg		r83	
109	pusharg		r85	
110	call		r18	r2	
111	pop		r86	
112	math	==	r88	r86	r87
113	jmp	if false	r88	offs:115	
114	mov		r84	r83	
115	jmp	anyway		offs:116	
116	mov		r84	r89	
117	ret		r84	r81	
118	set		r22	r47	r80
119	func		r90	offs:120	
120	jmp	anyway		offs:125	
121	getarg		r91	
122	argmunets		r92	
123	getarg		r93	
124	clear		
125	ret		r85	r91	
126	set		r34	r47	r90
127	func		r94	offs:128	
128	jmp	anyway		offs:143	
129	getarg		r95	
130	argmunets		r96	
131	getarg		r97	
132	clear		
133	pusharg		r97	
134	pusharg		r99	
135	call		r18	r2	
136	pop		r101	
137	math	==	r103	r101	r102
138	jmp	if false	r103	offs:140	
139	mov		r98	r97	
140	jmp	anyway		offs:142	
141	get		r105	r25	r104
142	mov		r98	r105	
143	ret		r98	r95	
144	set		r25	r47	r94
145	func		r107	offs:146	
146	jmp	anyway		offs:161	
147	getarg		r108	
148	argmunets		r109	
149	clear		
150	pusharg		r108	
151	pusharg		r99	
152	call		r0	r2	
153	pop		r110	
154	jmp	if false	r110	offs:160	
155	get		r112	r110	r111
156	delete		r108	r112	
157	pusharg		r110	
158	call		r110	r1	
159	pop		r110	
160	jmp	anyway		offs:153	
161	ret		r99	r108	
162	set		r37	r106	r107
163	func		r114	offs:164	
164	jmp	anyway		offs:169	
165	getarg		r115	
166	argmunets		r116	
167	clear		
168	length		r117	r115	
169	ret		r117	r115	
170	set		r25	r113	r114
171	set		r37	r113	r114
172	set		r40	r113	r114
173	get		r118	r37	r106
174	set		r40	r106	r118
175	get		r120	r1	r119
176	mov		r121	r120	
177	func		r122	offs:178	
178	jmp	anyway		offs:200	
179	getarg		r123	
180	argmunets		r124	
181	getarg		r125	
182	getarg		r126	
183	clear		
184	get		r127	r125	r64
185	math	==	r128	r127	r126
186	jmp	if false	r128	offs:188	
187	ret		r129	r123	
188	nop		
189	get		r130	r125	r62
190	math	!=	r132	r130	r131
191	get		r133	r125	r62
192	math	!=	r134	r133	r126
193	math	&&	r132	r132	r134
194	jmp	if false	r132	offs:197	
195	get		r135	r125	r60
196	mov		r125	r135	
197	jmp	anyway		offs:188	
198	get		r136	r125	r62
199	math	==	r137	r136	r126
200	ret		r137	r123	
201	mov		r138	r122	
202	func		r140	offs:203	
203	jmp	anyway		offs:214	
204	getarg		r141	
205	argmunets		r142	
206	getarg		r143	
207	getarg		r144	
208	clear		
209	pusharg		r144	
210	pusharg		r143	
211	pusharg		r131	
212	call		r138	r3	
213	pop		r145	
214	ret		r145	r141	
215	mov		r146	r140	
216	func		r148	offs:217	
217	jmp	anyway		offs:226	
218	getarg		r149	
219	argmunets		r150	
220	getarg		r151	
221	getarg		r152	
222	clear		
223	math	!	r153	r151	r0
224	math	!	r154	r152	r0
225	math	||	r155	r153	r154
226	ret		r155	r149	
227	mov		r156	r148	
228	func		r158	offs:229	
229	jmp	anyway		offs:280	
230	getarg		r159	
231	argmunets		r160	
232	getarg		r161	
233	getarg		r162	
234	clear		
235	pusharg		r162	
236	pusharg		r161	
237	pusharg		r163	
238	call		r146	r3	
239	pop		r164	
240	math	==	r166	r164	r165
241	jmp	if false	r166	offs:243	
242	ret		r163	r159	
243	nop		
244	objalloc		r167	r0	
245	pusharg		r167	
246	call		r162	r1	
247	pop		r169	
248	mov		r170	r167	
249	get		r173	r161	r172
250	pusharg		r173	
251	pusharg		r174	
252	call		r0	r2	
253	pop		r171	
254	jmp	if false	r171	offs:264	
255	get		r175	r171	r111
256	get		r176	r171	r111
257	get		r177	r161	r176
258	get		r179	r171	r178
259	math	||	r180	r177	r179
260	set		r170	r175	r180
261	pusharg		r171	
262	call		r171	r1	
263	pop		r171	
264	jmp	anyway		offs:253	
265	get		r182	r161	r172
266	get		r182	r182	r181
267	set		r170	r181	r182
268	set		r170	r183	r162
269	get		r184	r161	r172
270	get		r184	r184	r185
271	math	!=	r186	r184	r174
272	jmp	if false	r186	offs:276	
273	get		r187	r161	r172
274	get		r187	r187	r185
275	set		r170	r185	r187
276	nop		
277	get		r190	r161	r189
278	get		r190	r190	r188
279	set		r170	r188	r190
280	ret		r170	r159	
281	mov		r191	r158	
282	func		r193	offs:283	
283	jmp	anyway		offs:330	
284	getarg		r194	
285	argmunets		r195	
286	getarg		r196	
287	clear		
288	pusharg		r196	
289	pusharg		r197	
290	call		r18	r2	
291	pop		r198	
292	math	==	r200	r198	r199
293	jmp	if false	r200	offs:297	
294	get		r201	r196	r183
295	math	||	r202	r201	r37
296	ret		r202	r194	
297	nop		
298	pusharg		r196	
299	pusharg		r197	
300	call		r18	r2	
301	pop		r203	
302	math	==	r204	r203	r87
303	jmp	if false	r204	offs:305	
304	ret		r22	r194	
305	nop		
306	pusharg		r196	
307	pusharg		r205	
308	call		r18	r2	
309	pop		r206	
310	math	==	r207	r206	r102
311	jmp	if false	r207	offs:313	
312	ret		r25	r194	
313	nop		
314	pusharg		r196	
315	pusharg		r205	
316	call		r18	r2	
317	pop		r208	
318	math	==	r210	r208	r209
319	jmp	if false	r210	offs:321	
320	ret		r28	r194	
321	nop		
322	pusharg		r196	
323	pusharg		r211	
324	call		r18	r2	
325	pop		r212	
326	math	==	r214	r212	r213
327	jmp	if false	r214	offs:329	
328	ret		r40	r194	
329	nop		
330	ret		r211	r194	
331	mov		r215	r193	
332	func		r217	offs:333	
333	jmp	anyway		offs:348	
334	getarg		r218	
335	argmunets		r219	
336	getarg		r220	
337	getarg		r221	
338	clear		
339	pusharg		r220	
340	pusharg		r222	
341	call		r215	r2	
342	pop		r223	
343	pusharg		r221	
344	pusharg		r222	
345	call		r215	r2	
346	pop		r224	
347	math	==	r225	r223	r224
348	ret		r225	r218	
349	mov		r226	r217	
350	func		r228	offs:351	
351	jmp	anyway		offs:370	
352	getarg		r229	
353	argmunets		r230	
354	getarg		r231	
355	getarg		r232	
356	clear		
357	math	>	r233	r231	r232
358	jmp	if false	r233	offs:360	
359	ret		r234	r229	
360	nop		
361	math	==	r235	r231	r232
362	jmp	if false	r235	offs:364	
363	ret		r89	r229	
364	nop		
365	math	<	r236	r231	r232
366	jmp	if false	r236	offs:369	
367	math	neg	r237	r234	r0
368	ret		r237	r229	
369	nop		
370	ret		r222	r229	
371	mov		r238	r228	
372	func		r241	offs:373	
373	jmp	anyway		offs:393	
374	getarg		r242	
375	argmunets		r243	
376	getarg		r244	
377	clear		
378	objalloc		r245	r0	
379	func		r246	offs:380	
380	jmp	anyway		offs:385	
381	getarg		r247	
382	argmunets		r248	
383	clear		
384	get		r250	r247	r249
385	ret		r250	r247	
386	set		r245	r251	r246
387	concat		r253	r252	r244
388	set		r245	r249	r253
389	get		r254	r242	r251
390	set		r245	r255	r254
391	set		r245	r256	r129
392	throw		r245	
393	ret		r257	r242	
394	set		r121	r240	r241
395	func		r258	offs:396	
396	jmp	anyway		offs:401	
397	getarg		r259	
398	argmunets		r260	
399	clear		
400	concat		r261	r45	r259
401	ret		r261	r259	
402	set		r22	r41	r258
403	func		r262	offs:404	
404	jmp	anyway		offs:409	
405	getarg		r263	
406	argmunets		r264	
407	clear		
408	concat		r266	r263	r265
409	ret		r266	r263	
410	set		r40	r41	r262
411	func		r267	offs:412	
412	jmp	anyway		offs:417	
413	getarg		r268	
414	argmunets		r269	
415	clear		
416	concat		r270	r268	r265
417	ret		r270	r268	
418	set		r37	r41	r267
419	func		r271	offs:420	
420	jmp	anyway		offs:425	
421	getarg		r272	
422	argmunets		r273	
423	clear		
424	concat		r275	r272	r274
425	ret		r275	r272	
426	set		r28	r41	r271
427	func		r276	offs:428	
428	jmp	anyway		offs:432	
429	getarg		r277	
430	argmunets		r278	
431	clear		
432	ret		r279	r277	
433	set		r34	r41	r276
434	func		r280	offs:435	
435	jmp	anyway		offs:439	
436	getarg		r281	
437	argmunets		r282	
438	clear		
439	ret		r283	r281	
440	set		r31	r41	r280
441	func		r284	offs:442	
442	jmp	anyway		offs:446	
443	getarg		r285	
444	argmunets		r286	
445	clear		
446	ret		r285	r285	
447	set		r25	r41	r284
448	func		r287	offs:449	
449	jmp	anyway		offs:462	
450	getarg		r288	
451	argmunets		r289	
452	getarg		r290	
453	clear		
454	pusharg		r290	
455	pusharg		r257	
456	call		r18	r2	
457	pop		r292	
458	math	==	r293	r292	r199
459	jmp	if false	r293	offs:461	
460	ret		r290	r288	
461	nop		
462	ret		r257	r288	
463	mov		r294	r287	
464	func		r296	offs:465	
465	jmp	anyway		offs:478	
466	getarg		r297	
467	argmunets		r298	
468	getarg		r299	
469	clear		
470	pusharg		r299	
471	pusharg		r300	
472	call		r215	r2	
473	pop		r302	
474	math	==	r303	r302	r22
475	jmp	if false	r303	offs:477	
476	ret		r299	r297	
477	nop		
478	ret		r300	r297	
479	mov		r304	r296	
480	func		r306	offs:481	
481	jmp	anyway		offs:495	
482	getarg		r307	
483	argmunets		r308	
484	getarg		r309	
485	clear		
486	pusharg		r309	
487	pusharg		r310	
488	call		r215	r2	
489	pop		r311	
490	math	==	r312	r311	r28
491	jmp	if false	r312	offs:493	
492	ret		r309	r307	
493	nop		
494	math	||	r313	r309	r165
495	ret		r313	r307	
496	mov		r314	r306	
497	func		r316	offs:498	
498	jmp	anyway		offs:515	
499	getarg		r317	
500	argmunets		r318	
501	getarg		r319	
502	clear		
503	pusharg		r319	
504	pusharg		r310	
505	call		r215	r2	
506	pop		r321	
507	math	==	r322	r321	r25
508	jmp	if false	r322	offs:510	
509	ret		r319	r317	
510	nop		
511	get		r324	r319	r323
512	pusharg		r319	
513	call		r324	r1	
514	pop		r326	
515	ret		r326	r317	
516	mov		r327	r316	
517	func		r329	offs:518	
518	jmp	anyway		offs:524	
519	getarg		r330	
520	argmunets		r331	
521	getarg		r332	
522	clear		
523	math	==	r334	r332	r333
524	ret		r334	r330	
525	mov		r335	r329	
526	func		r337	offs:527	
527	jmp	anyway		offs:613	
528	getarg		r339	
529	argmunets		r340	
530	getarg		r341	
531	getarg		r342	
532	getarg		r343	
533	getarg		r344	
534	clear		
535	objalloc		r345	r0	
536	pusharg		r345	
537	call		r37	r1	
538	pop		r346	
539	set		r339	r189	r345
540	set		r339	r181	r37
541	get		r347	r339	r189
542	get		r347	r347	r188
543	set		r339	r185	r347
544	set		r339	r348	r337
545	set		r339	r349	r333
546	set		r339	r350	r333
547	set		r339	r351	r333
548	set		r339	r352	r333
549	func		r353	offs:550	
550	jmp	anyway		offs:577	
551	getarg		r354	
552	argmunets		r355	
553	clear		
554	get		r356	r354	r349
555	mov		r357	r356	
556	math	!=	r358	r342	r333
557	jmp	if false	r358	offs:562	
558	concat		r360	r357	r359
559	get		r361	r354	r350
560	concat		r360	r360	r361
561	mov		r357	r360	
562	nop		
563	math	!=	r362	r343	r333
564	jmp	if false	r362	offs:569	
565	concat		r364	r357	r363
566	get		r365	r354	r351
567	concat		r364	r364	r365
568	mov		r357	r364	
569	nop		
570	math	!=	r366	r344	r333
571	jmp	if false	r366	offs:576	
572	concat		r368	r357	r367
573	get		r369	r354	r352
574	concat		r368	r368	r369
575	mov		r357	r368	
576	nop		
577	ret		r357	r354	
578	set		r339	r251	r353
579	func		r370	offs:580	
580	jmp	anyway		offs:588	
581	getarg		r371	
582	argmunets		r372	
583	clear		
584	get		r373	r371	r251
585	pusharg		r371	
586	call		r373	r1	
587	pop		r375	
588	ret		r375	r371	
589	set		r339	r255	r370
590	func		r376	offs:591	
591	jmp	anyway		offs:603	
592	getarg		r377	
593	argmunets		r378	
594	getarg		r379	
595	getarg		r380	
596	getarg		r381	
597	getarg		r382	
598	clear		
599	set		r377	r383	r379
600	set		r377	r384	r380
601	set		r377	r385	r381
602	set		r377	r386	r382
603	ret		r333	r377	
604	set		r339	r188	r376
605	get		r387	r339	r188
606	pusharg		r344	
607	pusharg		r343	
608	pusharg		r342	
609	pusharg		r341	
610	pusharg		r339	
611	call		r387	r5	
612	pop		r389	
613	ret		r333	r339	
614	func		r390	offs:615	
615	jmp	anyway		offs:653	
616	getarg		r392	
617	argmunets		r393	
618	getarg		r394	
619	getarg		r395	
620	clear		
621	objalloc		r397	r0	
622	pusharg		r397	
623	call		r337	r1	
624	pop		r398	
625	set		r392	r396	r397
626	set		r392	r399	r337
627	get		r401	r392	r396
628	get		r401	r401	r402
629	set		r392	r400	r401
630	set		r392	r348	r390
631	func		r403	offs:632	
632	jmp	anyway		offs:645	
633	getarg		r404	
634	argmunets		r405	
635	getarg		r406	
636	pack		r407	
637	clear		
638	get		r408	r404	r400
639	unpack		r407	
640	concat		r410	r409	r406
641	pusharg		r410	
642	pusharg		r404	
643	call		r408	r3	
644	pop		r412	
645	ret		r413	r404	
646	set		r392	r402	r403
647	get		r414	r392	r402
648	pusharg		r395	
649	pusharg		r394	
650	pusharg		r392	
651	call		r414	r3	
652	pop		r415	
653	ret		r413	r392	
654	func		r416	offs:655	
655	jmp	anyway		offs:703	
656	getarg		r418	
657	argmunets		r419	
658	getarg		r420	
659	getarg		r421	
660	clear		
661	objalloc		r422	r0	
662	pusharg		r422	
663	call		r337	r1	
664	pop		r424	
665	set		r418	r396	r422
666	set		r418	r399	r337
667	get		r426	r418	r396
668	get		r426	r426	r402
669	set		r418	r425	r426
670	set		r418	r427	r416
671	set		r418	r256	r428
672	func		r430	offs:673	
673	jmp	anyway		offs:679	
674	getarg		r431	
675	argmunets		r432	
676	clear		
677	delete		r431	r256	
678	throw		r431	
679	ret		r413	r431	
680	set		r418	r429	r430
681	func		r433	offs:682	
682	jmp	anyway		offs:695	
683	getarg		r434	
684	argmunets		r435	
685	getarg		r436	
686	pack		r437	
687	clear		
688	get		r438	r434	r425
689	unpack		r437	
690	concat		r440	r439	r436
691	pusharg		r440	
692	pusharg		r434	
693	call		r438	r3	
694	pop		r441	
695	ret		r413	r434	
696	set		r418	r402	r433
697	get		r442	r418	r402
698	pusharg		r421	
699	pusharg		r420	
700	pusharg		r418	
701	call		r442	r3	
702	pop		r444	
703	ret		r413	r418	
704	func		r446	offs:705	
705	jmp	anyway		offs:735	
706	getarg		r447	
707	argmunets		r448	
708	getarg		r449	
709	getarg		r450	
710	clear		
711	math	>	r451	r449	r450
712	math	<	r453	r449	r452
713	math	+	r454	r449	r450
714	length		r455	r447	
715	math	>	r454	r454	r455
716	math	<	r456	r450	r452
717	math	||	r454	r454	r456
718	math	||	r453	r453	r454
719	math	||	r451	r451	r453
720	jmp	if false	r451	offs:722	
721	ret		r457	r447	
722	nop		
723	math	==	r458	r450	r452
724	jmp	if false	r458	offs:727	
725	get		r459	r25	r104
726	ret		r459	r447	
727	nop		
728	get		r461	r1	r460
729	pusharg		r450	
730	pusharg		r449	
731	pusharg		r447	
732	pusharg		r1	
733	call		r461	r4	
734	pop		r463	
735	ret		r463	r447	
736	set		r25	r445	r446
737	func		r465	offs:738	
738	jmp	anyway		offs:749	
739	getarg		r466	
740	argmunets		r467	
741	getarg		r468	
742	clear		
743	get		r469	r466	r445
744	pusharg		r470	
745	pusharg		r468	
746	pusharg		r466	
747	call		r469	r3	
748	pop		r472	
749	ret		r472	r466	
750	set		r25	r464	r465
751	set		r25	r473	r274
752	func		r475	offs:753	
753	jmp	anyway		offs:797	
754	getarg		r476	
755	argmunets		r477	
756	getarg		r478	
757	getarg		r479	
758	clear		
759	math	<	r481	r478	r480
760	length		r482	r476	
761	math	>=	r483	r478	r482
762	pusharg		r478	
763	pusharg		r457	
764	call		r18	r2	
765	pop		r484	
766	math	!=	r486	r484	r485
767	math	||	r483	r483	r486
768	math	||	r481	r481	r483
769	jmp	if false	r481	offs:774	
770	concat		r488	r487	r478
771	concat		r488	r488	r489
772	concat		r488	r488	r479
773	throw		r488	
774	nop		
775	get		r491	r476	r490
776	pusharg		r478	
777	pusharg		r480	
778	pusharg		r476	
779	call		r491	r3	
780	pop		r492	
781	math	||	r493	r492	r274
782	mov		r494	r493	
783	get		r495	r476	r490
784	length		r496	r476	
785	math	-	r497	r496	r478
786	math	-	r497	r497	r470
787	pusharg		r497	
788	math	+	r498	r478	r470
789	pusharg		r498	
790	pusharg		r476	
791	call		r495	r3	
792	pop		r499	
793	math	||	r500	r499	r274
794	mov		r501	r500	
795	concat		r502	r494	r479
796	concat		r502	r502	r501
797	ret		r502	r476	
798	set		r25	r474	r475
799	func		r503	offs:800	
800	jmp	anyway		offs:896	
801	getarg		r504	
802	argmunets		r505	
803	getarg		r506	
804	clear		
805	objalloc		r507	r0	
806	func		r508	offs:807	
807	jmp	anyway		offs:863	
808	getarg		r509	
809	argmunets		r510	
810	clear		
811	get		r512	r509	r511
812	get		r514	r509	r513
813	math	||	r515	r512	r514
814	jmp	if false	r515	offs:862	
815	get		r517	r509	r516
816	math	==	r519	r517	r518
817	jmp	if false	r519	offs:833	
818	get		r520	r509	r511
819	jmp	if false	r520	offs:826	
820	get		r522	r1	r521
821	pusharg		r506	
822	pusharg		r1	
823	call		r522	r2	
824	pop		r524	
825	set		r509	r516	r524
826	jmp	anyway		offs:832	
827	get		r526	r1	r525
828	pusharg		r506	
829	pusharg		r1	
830	call		r526	r2	
831	pop		r528	
832	set		r509	r516	r528
833	nop		
834	get		r530	r509	r529
835	get		r532	r530	r531
836	pusharg		r530	
837	call		r532	r1	
838	pop		r534	
839	math	!	r535	r534	r0
840	jmp	if false	r535	offs:842	
841	ret		r518	r509	
842	nop		
843	get		r536	r509	r529
844	get		r538	r536	r537
845	pusharg		r536	
846	call		r538	r1	
847	pop		r540	
848	mov		r541	r540	
849	get		r543	r541	r542
850	set		r509	r542	r543
851	get		r544	r541	r178
852	set		r509	r178	r544
853	get		r545	r509	r542
854	math	==	r547	r545	r546
855	jmp	if false	r547	offs:860	
856	pusharg		r548	
857	call		r509	r1	
858	pop		r550	
859	ret		r550	r509	
860	nop		
861	ret		r509	r509	
862	nop		
863	ret		r548	r509	
864	set		r507	r47	r508
865	set		r507	r529	r551
866	func		r552	offs:867	
867	jmp	anyway		offs:877	
868	getarg		r553	
869	argmunets		r554	
870	clear		
871	objalloc		r555	r0	
872	pusharg		r556	
873	pusharg		r555	
874	call		r337	r2	
875	pop		r557	
876	throw		r555	
877	ret		r551	r553	
878	set		r507	r558	r552
879	set		r507	r178	r559
880	set		r507	r560	r559
881	pusharg		r506	
882	pusharg		r559	
883	call		r18	r2	
884	pop		r562	
885	math	==	r563	r562	r213
886	set		r507	r513	r563
887	pusharg		r506	
888	pusharg		r559	
889	call		r18	r2	
890	pop		r564	
891	math	==	r566	r564	r565
892	set		r507	r567	r566
893	pusharg		r559	
894	call		r507	r1	
895	pop		r569	
896	ret		r569	r504	
897	mov		r570	r503	
898	func		r572	offs:899	
899	jmp	anyway		offs:950	
900	getarg		r574	
901	argmunets		r575	
902	getarg		r576	
903	getarg		r577	
904	getarg		r578	
905	pack		r579	
906	clear		
907	math	==	r580	r578	r559
908	length		r581	r579	
909	math	==	r582	r581	r480
910	math	&&	r580	r580	r582
911	jmp	if false	r580	offs:913	
912	ret		r577	r574	
913	nop		
914	get		r583	r579	r113
915	pusharg		r579	
916	call		r583	r1	
917	pop		r585	
918	math	==	r586	r585	r480
919	jmp	if false	r586	offs:929	
920	pusharg		r578	
921	pusharg		r577	
922	pusharg		r559	
923	call		r576	r3	
924	pop		r588	
925	jmp	if false	r588	offs:927	
926	ret		r577	r574	
927	nop		
928	ret		r578	r574	
929	nop		
930	pusharg		r578	
931	pusharg		r577	
932	pusharg		r559	
933	call		r576	r3	
934	pop		r589	
935	jmp	if false	r589	offs:943	
936	unpack		r579	
937	pusharg		r577	
938	pusharg		r576	
939	pusharg		r559	
940	call		r572	r4	
941	pop		r590	
942	ret		r590	r574	
943	nop		
944	unpack		r579	
945	pusharg		r578	
946	pusharg		r576	
947	pusharg		r559	
948	call		r572	r4	
949	pop		r591	
950	ret		r591	r574	
951	func		r592	offs:952	
952	jmp	anyway		offs:971	
953	getarg		r594	
954	argmunets		r595	
955	pack		r596	
956	clear		
957	unpack		r596	
958	func		r597	offs:959	
959	jmp	anyway		offs:966	
960	getarg		r598	
961	argmunets		r599	
962	getarg		r600	
963	getarg		r601	
964	clear		
965	math	>	r602	r600	r601
966	ret		r602	r598	
967	pusharg		r597	
968	pusharg		r603	
969	call		r572	r3	
970	pop		r605	
971	ret		r605	r594	
972	func		r606	offs:973	
973	jmp	anyway		offs:992	
974	getarg		r608	
975	argmunets		r609	
976	pack		r610	
977	clear		
978	unpack		r610	
979	func		r611	offs:980	
980	jmp	anyway		offs:987	
981	getarg		r612	
982	argmunets		r613	
983	getarg		r614	
984	getarg		r615	
985	clear		
986	math	<	r616	r614	r615
987	ret		r616	r612	
988	pusharg		r611	
989	pusharg		r603	
990	call		r572	r3	
991	pop		r617	
992	ret		r617	r608	
993	func		r619	offs:994	
994	jmp	anyway		offs:1029	
995	getarg		r620	
996	argmunets		r621	
997	getarg		r622	
998	getarg		r623	
999	clear		
1000	pusharg		r622	
1001	pusharg		r624	
1002	call		r18	r2	
1003	pop		r625	
1004	math	==	r626	r625	r485
1005	math	==	r627	r623	r624
1006	math	&&	r626	r626	r627
1007	jmp	if false	r626	offs:1010	
1008	mov		r623	r622	
1009	mov		r622	r628	
1010	nop		
1011	math	||	r629	r622	r628
1012	mov		r622	r629	
1013	math	||	r631	r623	r630
1014	mov		r623	r631	
1015	math	>	r632	r622	r623
1016	jmp	if false	r632	offs:1017	
1017	throw		r633	
1018	math	==	r634	r622	r623
1019	jmp	if false	r634	offs:1021	
1020	ret		r622	r620	
1021	nop		
1022	get		r636	r1	r635
1023	pusharg		r1	
1024	call		r636	r1	
1025	pop		r638	
1026	math	-	r639	r623	r622
1027	math	%	r640	r638	r639
1028	math	+	r640	r640	r622
1029	ret		r640	r620	
1030	set		r4	r618	r619
1031	objalloc		r641	r0	
1032	func		r642	offs:1033	
1033	jmp	anyway		offs:1050	
1034	getarg		r643	
1035	argmunets		r644	
1036	getarg		r645	
1037	getarg		r646	
1038	clear		
1039	get		r648	r643	r647
1040	pusharg		r646	
1041	pusharg		r643	
1042	call		r648	r2	
1043	pop		r650	
1044	get		r651	r643	r647
1045	pusharg		r645	
1046	pusharg		r643	
1047	call		r651	r2	
1048	pop		r652	
1049	math	/	r653	r650	r652
1050	ret		r653	r643	
1051	set		r641	r654	r642
1052	get		r656	r1	r655
1053	set		r641	r657	r656
1054	get		r659	r1	r658
1055	set		r641	r660	r659
1056	func		r661	offs:1057	
1057	jmp	anyway		offs:1072	
1058	getarg		r662	
1059	argmunets		r663	
1060	getarg		r664	
1061	clear		
1062	get		r666	r662	r665
1063	get		r668	r662	r667
1064	pusharg		r664	
1065	pusharg		r662	
1066	call		r668	r2	
1067	pop		r670	
1068	pusharg		r670	
1069	pusharg		r662	
1070	call		r666	r2	
1071	pop		r672	
1072	ret		r672	r662	
1073	set		r641	r673	r661
1074	get		r675	r1	r674
1075	set		r641	r676	r675
1076	get		r677	r4	r618
1077	set		r641	r618	r677
1078	get		r679	r1	r678
1079	set		r641	r680	r679
1080	get		r682	r1	r681
1081	set		r641	r683	r682
1082	get		r685	r1	r684
1083	set		r641	r686	r685
1084	get		r688	r1	r687
1085	set		r641	r647	r688
1086	get		r690	r1	r689
1087	set		r641	r691	r690
1088	set		r641	r693	r692
1089	get		r695	r1	r694
1090	set		r641	r696	r695
1091	get		r698	r1	r697
1092	set		r641	r699	r698
1093	get		r701	r1	r700
1094	set		r641	r667	r701
1095	get		r703	r1	r702
1096	set		r641	r704	r703
1097	get		r706	r1	r705
1098	set		r641	r665	r706
1099	set		r641	r708	r707
1100	get		r710	r1	r709
1101	set		r641	r711	r710
1102	get		r713	r1	r712
1103	set		r641	r714	r713
1104	mov		r715	r641	
1105	get		r717	r715	r699
1106	math	neg	r719	r718	r0
1107	pusharg		r719	
1108	pusharg		r715	
1109	call		r717	r2	
1110	pop		r721	
1111	math	neg	r722	r721	r0
1112	mov		r723	r722	
1113	math	/	r725	r718	r628
1114	mov		r726	r725	
1115	func		r728	offs:1116	
1116	jmp	anyway		offs:1122	
1117	getarg		r729	
1118	argmunets		r730	
1119	getarg		r731	
1120	clear		
1121	math	==	r732	r731	r723
1122	ret		r732	r729	
1123	mov		r733	r728	
1124	func		r735	offs:1125	
1125	jmp	anyway		offs:1131	
1126	getarg		r736	
1127	argmunets		r737	
1128	getarg		r738	
1129	clear		
1130	math	==	r739	r738	r726
1131	ret		r739	r736	
1132	mov		r740	r735	
1133	func		r743	offs:1134	
1134	jmp	anyway		offs:1153	
1135	getarg		r744	
1136	argmunets		r745	
1137	getarg		r746	
1138	clear		
1139	pusharg		r746	
1140	pusharg		r624	
1141	call		r18	r2	
1142	pop		r748	
1143	math	!=	r749	r748	r283
1144	jmp	if false	r749	offs:1152	
1145	func		r750	offs:1146	
1146	jmp	anyway		offs:1150	
1147	getarg		r751	
1148	argmunets		r752	
1149	clear		
1150	ret		r624	r751	
1151	ret		r750	r744	
1152	nop		
1153	ret		r746	r744	
1154	set		r31	r742	r743
1155	func		r754	offs:1156	
1156	jmp	anyway		offs:1170	
1157	getarg		r755	
1158	argmunets		r756	
1159	getarg		r757	
1160	clear		
1161	mov		r758	r628	
1162	math	<	r759	r758	r755
1163	jmp	if false	r759	offs:1169	
1164	pusharg		r758	
1165	pusharg		r760	
1166	call		r757	r2	
1167	pop		r762	
1168	math	++	r758	r758	r0
1169	jmp	anyway		offs:1161	
1170	ret		r760	r755	
1171	set		r22	r753	r754
1172	func		r763	offs:1173	
1173	jmp	anyway		offs:1191	
1174	getarg		r764	
1175	argmunets		r765	
1176	getarg		r766	
1177	getarg		r767	
1178	clear		
1179	arralloc		r768	r0	
1180	mov		r769	r768	
1181	mov		r771	r770	
1182	math	<	r772	r771	r766
1183	jmp	if false	r772	offs:1190	
1184	pusharg		r771	
1185	pusharg		r760	
1186	call		r767	r2	
1187	pop		r774	
1188	set		r769	r771	r774
1189	math	++	r771	r771	r0
1190	jmp	anyway		offs:1181	
1191	ret		r769	r764	
1192	mov		r775	r763	
1193	func		r778	offs:1194	
1194	jmp	anyway		offs:1204	
1195	getarg		r779	
1196	argmunets		r780	
1197	getarg		r781	
1198	clear		
1199	get		r783	r779	r782
1200	pusharg		r779	
1201	call		r783	r1	
1202	pop		r785	
1203	set		r779	r785	r781
1204	ret		r786	r779	
1205	set		r40	r777	r778
1206	func		r788	offs:1207	
1207	jmp	anyway		offs:1228	
1208	getarg		r789	
1209	argmunets		r790	
1210	getarg		r791	
1211	clear		
1212	pusharg		r789	
1213	pusharg		r786	
1214	call		r570	r2	
1215	pop		r792	
1216	jmp	if false	r792	offs:1227	
1217	get		r793	r792	r560
1218	get		r795	r792	r794
1219	pusharg		r795	
1220	pusharg		r786	
1221	call		r791	r2	
1222	pop		r797	
1223	set		r789	r793	r797
1224	pusharg		r792	
1225	call		r792	r1	
1226	pop		r792	
1227	jmp	anyway		offs:1215	
1228	ret		r786	r789	
1229	set		r40	r787	r788
1230	func		r798	offs:1231	
1231	jmp	anyway		offs:1268	
1232	getarg		r799	
1233	argmunets		r800	
1234	getarg		r801	
1235	getarg		r802	
1236	clear		
1237	func		r803	offs:1238	
1238	jmp	anyway		offs:1242	
1239	getarg		r804	
1240	argmunets		r805	
1241	clear		
1242	ret		r428	r804	
1243	math	||	r806	r802	r803
1244	mov		r802	r806	
1245	pusharg		r799	
1246	pusharg		r808	
1247	call		r570	r2	
1248	pop		r807	
1249	jmp	if false	r807	offs:1267	
1250	get		r810	r807	r809
1251	pusharg		r810	
1252	pusharg		r808	
1253	call		r802	r2	
1254	pop		r812	
1255	jmp	if false	r812	offs:1263	
1256	get		r813	r807	r809
1257	get		r814	r807	r794
1258	pusharg		r814	
1259	pusharg		r808	
1260	call		r801	r2	
1261	pop		r815	
1262	set		r799	r813	r815
1263	nop		
1264	pusharg		r807	
1265	call		r807	r1	
1266	pop		r807	
1267	jmp	anyway		offs:1248	
1268	ret		r816	r799	
1269	set		r37	r787	r798
1270	func		r818	offs:1271	
1271	jmp	anyway		offs:1288	
1272	getarg		r819	
1273	argmunets		r820	
1274	pack		r821	
1275	clear		
1276	mov		r822	r770	
1277	get		r823	r821	r782
1278	math	<	r824	r822	r823
1279	jmp	if false	r824	offs:1287	
1280	get		r825	r819	r777
1281	get		r826	r821	r822
1282	pusharg		r826	
1283	pusharg		r819	
1284	call		r825	r2	
1285	pop		r828	
1286	math	++	r822	r822	r0
1287	jmp	anyway		offs:1276	
1288	ret		r816	r819	
1289	set		r40	r817	r818
1290	func		r829	offs:1291	
1291	jmp	anyway		offs:1316	
1292	getarg		r830	
1293	argmunets		r831	
1294	getarg		r832	
1295	clear		
1296	pusharg		r832	
1297	pusharg		r833	
1298	call		r18	r2	
1299	pop		r834	
1300	math	!=	r835	r834	r565
1301	jmp	if false	r835	offs:1303	
1302	ret		r833	r830	
1303	nop		
1304	pusharg		r832	
1305	pusharg		r833	
1306	call		r570	r2	
1307	pop		r836	
1308	jmp	if false	r836	offs:1315	
1309	get		r837	r836	r809
1310	get		r839	r836	r838
1311	set		r830	r837	r839
1312	pusharg		r836	
1313	call		r836	r1	
1314	pop		r836	
1315	jmp	anyway		offs:1307	
1316	ret		r840	r830	
1317	set		r37	r817	r829
1318	func		r842	offs:1319	
1319	jmp	anyway		offs:1338	
1320	getarg		r843	
1321	argmunets		r844	
1322	getarg		r845	
1323	clear		
1324	pusharg		r845	
1325	pusharg		r840	
1326	call		r570	r2	
1327	pop		r846	
1328	jmp	if false	r846	offs:1335	
1329	get		r848	r846	r847
1330	get		r849	r846	r838
1331	set		r843	r848	r849
1332	pusharg		r846	
1333	call		r846	r1	
1334	pop		r846	
1335	jmp	anyway		offs:1327	
1336	get		r850	r845	r546
1337	set		r843	r546	r850
1338	ret		r840	r843	
1339	set		r37	r841	r842
1340	func		r852	offs:1341	
1341	jmp	anyway		offs:1349	
1342	getarg		r853	
1343	argmunets		r854	
1344	clear		
1345	pusharg		r853	
1346	pusharg		r855	
1347	call		r40	r2	
1348	pop		r856	
1349	ret		r856	r853	
1350	set		r40	r851	r852
1351	func		r858	offs:1352	
1352	jmp	anyway		offs:1402	
1353	getarg		r859	
1354	argmunets		r860	
1355	getarg		r861	
1356	getarg		r862	
1357	clear		
1358	func		r863	offs:1359	
1359	jmp	anyway		offs:1366	
1360	getarg		r864	
1361	argmunets		r865	
1362	getarg		r866	
1363	getarg		r867	
1364	clear		
1365	math	<	r868	r866	r867
1366	ret		r868	r864	
1367	math	||	r869	r862	r863
1368	mov		r862	r869	
1369	mov		r871	r870	
1370	length		r872	r859	
1371	mov		r873	r872	
1372	math	<	r874	r871	r873
1373	jmp	if false	r874	offs:1400	
1374	math	+	r875	r871	r873
1375	math	/	r877	r875	r876
1376	mov		r878	r877	
1377	get		r879	r715	r665
1378	math	-	r881	r878	r880
1379	pusharg		r881	
1380	pusharg		r715	
1381	call		r879	r2	
1382	pop		r883	
1383	mov		r878	r883	
1384	get		r884	r859	r878
1385	math	==	r885	r884	r861
1386	jmp	if false	r885	offs:1388	
1387	ret		r878	r859	
1388	nop		
1389	pusharg		r861	
1390	get		r886	r859	r878
1391	pusharg		r886	
1392	pusharg		r855	
1393	call		r862	r3	
1394	pop		r888	
1395	jmp	if false	r888	offs:1398	
1396	math	+	r889	r878	r718
1397	mov		r871	r889	
1398	jmp	anyway		offs:1399	
1399	mov		r873	r878	
1400	jmp	anyway		offs:1371	
1401	math	neg	r890	r718	r0
1402	ret		r890	r859	
1403	set		r40	r857	r858
1404	func		r892	offs:1405	
1405	jmp	anyway		offs:1449	
1406	getarg		r893	
1407	argmunets		r894	
1408	getarg		r895	
1409	clear		
1410	func		r896	offs:1411	
1411	jmp	anyway		offs:1418	
1412	getarg		r897	
1413	argmunets		r898	
1414	getarg		r899	
1415	getarg		r900	
1416	clear		
1417	math	>	r901	r899	r900
1418	ret		r901	r897	
1419	math	||	r902	r895	r896
1420	mov		r895	r902	
1421	mov		r903	r870	
1422	length		r904	r893	
1423	math	-	r906	r904	r905
1424	math	<	r906	r903	r906
1425	jmp	if false	r906	offs:1448	
1426	math	+	r907	r903	r905
1427	mov		r908	r907	
1428	length		r909	r893	
1429	math	<	r910	r908	r909
1430	jmp	if false	r910	offs:1446	
1431	get		r911	r893	r908
1432	pusharg		r911	
1433	get		r912	r893	r903
1434	pusharg		r912	
1435	pusharg		r913	
1436	call		r895	r3	
1437	pop		r914	
1438	jmp	if false	r914	offs:1444	
1439	get		r915	r893	r903
1440	mov		r916	r915	
1441	get		r917	r893	r908
1442	set		r893	r903	r917
1443	set		r893	r908	r916
1444	nop		
1445	math	++	r908	r908	r0
1446	jmp	anyway		offs:1427	
1447	math	++	r903	r903	r0
1448	jmp	anyway		offs:1421	
1449	ret		r893	r893	
1450	set		r40	r891	r892
1451	func		r919	offs:1452	
1452	jmp	anyway		offs:1463	
1453	getarg		r920	
1454	argmunets		r921	
1455	getarg		r922	
1456	clear		
1457	objalloc		r923	r0	
1458	pusharg		r924	
1459	pusharg		r923	
1460	call		r390	r2	
1461	pop		r925	
1462	throw		r923	
1463	ret		r913	r920	
1464	set		r40	r918	r919
1465	func		r927	offs:1466	
1466	jmp	anyway		offs:1477	
1467	getarg		r928	
1468	argmunets		r929	
1469	getarg		r930	
1470	clear		
1471	objalloc		r931	r0	
1472	pusharg		r932	
1473	pusharg		r931	
1474	call		r390	r2	
1475	pop		r934	
1476	throw		r931	
1477	ret		r935	r928	
1478	set		r40	r926	r927
1479	get		r937	r40	r926
1480	set		r40	r936	r937
1481	get		r939	r40	r891
1482	set		r40	r938	r939
1483	func		r941	offs:1484	
1484	jmp	anyway		offs:1518	
1485	getarg		r942	
1486	argmunets		r943	
1487	clear		
1488	objalloc		r944	r0	
1489	mov		r945	r944	
1490	arralloc		r946	r0	
1491	mov		r947	r946	
1492	pusharg		r942	
1493	pusharg		r935	
1494	call		r570	r2	
1495	pop		r948	
1496	jmp	if false	r948	offs:1513	
1497	get		r950	r948	r949
1498	get		r951	r945	r950
1499	jmp	if false	r951	offs:1501	
1500	jmp	anyway		offs:1509	
1501	nop		
1502	get		r952	r948	r949
1503	set		r945	r952	r953
1504	get		r955	r947	r954
1505	get		r956	r948	r949
1506	pusharg		r956	
1507	pusharg		r947	
1508	call		r955	r2	
1509	pop		r958	
1510	pusharg		r948	
1511	call		r948	r1	
1512	pop		r948	
1513	jmp	anyway		offs:1495	
1514	get		r959	r945	r106
1515	pusharg		r945	
1516	call		r959	r1	
1517	pop		r961	
1518	ret		r947	r942	
1519	set		r40	r940	r941
1520	func		r963	offs:1521	
1521	jmp	anyway		offs:1559	
1522	getarg		r964	
1523	argmunets		r965	
1524	getarg		r966	
1525	clear		
1526	pusharg		r966	
1527	pusharg		r967	
1528	call		r18	r2	
1529	pop		r969	
1530	math	!=	r971	r969	r970
1531	jmp	if false	r971	offs:1541	
1532	func		r972	offs:1533	
1533	jmp	anyway		offs:1539	
1534	getarg		r973	
1535	argmunets		r974	
1536	getarg		r975	
1537	clear		
1538	math	==	r976	r966	r975
1539	ret		r976	r973	
1540	mov		r966	r972	
1541	nop		
1542	pusharg		r964	
1543	pusharg		r967	
1544	call		r570	r2	
1545	pop		r977	
1546	jmp	if false	r977	offs:1558	
1547	get		r978	r977	r949
1548	pusharg		r978	
1549	pusharg		r967	
1550	call		r966	r2	
1551	pop		r979	
1552	jmp	if false	r979	offs:1554	
1553	ret		r953	r964	
1554	nop		
1555	pusharg		r977	
1556	call		r977	r1	
1557	pop		r977	
1558	jmp	anyway		offs:1545	
1559	ret		r980	r964	
1560	set		r40	r962	r963
1561	func		r982	offs:1562	
1562	jmp	anyway		offs:1621	
1563	getarg		r983	
1564	argmunets		r984	
1565	clear		
1566	func		r985	offs:1567	
1567	jmp	anyway		offs:1611	
1568	getarg		r986	
1569	argmunets		r987	
1570	getarg		r988	
1571	pack		r989	
1572	clear		
1573	pusharg		r988	
1574	pusharg		r980	
1575	call		r18	r2	
1576	pop		r990	
1577	math	==	r992	r990	r991
1578	jmp	if false	r992	offs:1585	
1579	unpack		r988	
1580	unpack		r989	
1581	pusharg		r980	
1582	call		r985	r3	
1583	pop		r993	
1584	ret		r993	r986	
1585	nop		
1586	get		r994	r989	r962
1587	func		r995	offs:1588	
1588	jmp	anyway		offs:1598	
1589	getarg		r996	
1590	argmunets		r997	
1591	getarg		r998	
1592	clear		
1593	pusharg		r998	
1594	pusharg		r980	
1595	call		r18	r2	
1596	pop		r999	
1597	math	==	r1000	r999	r991
1598	ret		r1000	r996	
1599	pusharg		r995	
1600	pusharg		r989	
1601	call		r994	r2	
1602	pop		r1002	
1603	jmp	if false	r1002	offs:1610	
1604	pusharg		r988	
1605	unpack		r989	
1606	pusharg		r980	
1607	call		r985	r3	
1608	pop		r1003	
1609	ret		r1003	r986	
1610	nop		
1611	ret		r987	r986	
1612	mov		r1004	r985	
1613	unpack		r983	
1614	pusharg		r980	
1615	call		r1004	r2	
1616	pop		r1006	
1617	get		r1007	r1006	r938
1618	pusharg		r1006	
1619	call		r1007	r1	
1620	pop		r1009	
1621	ret		r1009	r983	
1622	set		r40	r981	r982
1623	get		r1011	r1	r1010
1624	mov		r1012	r1011	
1625	func		r1014	offs:1626	
1626	jmp	anyway		offs:1632	
1627	getarg		r1015	
1628	argmunets		r1016	
1629	clear		
1630	concat		r1018	r1013	r1017
1631	concat		r1018	r1018	r1019
1632	ret		r1018	r1015	
1633	set		r121	r1013	r1014
1634	objalloc		r1021	r0	
1635	func		r1022	offs:1636	
1636	jmp	anyway		offs:1650	
1637	getarg		r1023	
1638	argmunets		r1024	
1639	getarg		r1025	
1640	clear		
1641	get		r1027	r1023	r1026
1642	concat		r1028	r1027	r1025
1643	concat		r1028	r1028	r1029
1644	concat		r1028	r1028	r1030
1645	print		r1028	r0	
1646	get		r1031	r1023	r1026
1647	length		r1032	r1031	
1648	length		r1033	r1025	
1649	math	+	r1034	r1032	r1033
1650	ret		r1034	r1023	
1651	set		r1021	r1035	r1022
1652	set		r1021	r1037	r1036
1653	set		r121	r1020	r1021
1654	func		r1039	offs:1655	
1655	jmp	anyway		offs:1679	
1656	getarg		r1040	
1657	argmunets		r1041	
1658	getarg		r1042	
1659	getarg		r1043	
1660	pack		r1044	
1661	clear		
1662	print		r1041	r0	
1663	concat		r1046	r1045	r1042
1664	concat		r1046	r1046	r1047
1665	concat		r1046	r1046	r1043
1666	print		r1046	r0	
1667	length		r1048	r1044	
1668	math	==	r1050	r1048	r1049
1669	jmp	if false	r1050	offs:1671	
1670	ret		r1051	r1040	
1671	nop		
1672	get		r1052	r121	r1038
1673	unpack		r1044	
1674	math	+	r1054	r1042	r1053
1675	pusharg		r1054	
1676	pusharg		r121	
1677	call		r1052	r3	
1678	pop		r1056	
1679	ret		r1051	r1040	
1680	set		r121	r1038	r1039
1681	pusharg		r1057	
1682	pusharg		r1051	
1683	call		r1012	r2	
1684	pop		r1058	
1685	get		r1060	r1058	r1059
1686	pusharg		r1061	
1687	pusharg		r1058	
1688	call		r1060	r2	
1689	pop		r1063	
1690	print		r1063	r0	
1691	get		r1065	r121	r1064
1692	pusharg		r1066	
1693	pusharg		r121	
1694	call		r1065	r2	
1695	pop		r1068	
1696	print		r1068	r0	
1697	math	+	r1069	r1068	r1068
1698	mov		r1068	r1069	
1699	print		r1068	r0	
1700	math	!	r1070	r1068	r0
1701	print		r1070	r0	
1702	math	++	r1068	r1068	r0
1703	print		r1068	r0	
1704	set		r1068	r1071	r1049
1705	math	!	r1072	r1068	r0
1706	print		r1072	r0	
1707	objalloc		r1073	r0	
1708	set		r1073	r1075	r1074
1709	set		r1073	r1076	r876
1710	set		r1073	r1071	r1053
1711	mov		r1077	r1073	
1712	pusharg		r1077	
1713	pusharg		r1051	
1714	call		r570	r2	
1715	pop		r1078	
1716	jmp	if false	r1078	offs:1721	
1717	print		r1078	r0	
1718	pusharg		r1078	
1719	call		r1078	r1	
1720	pop		r1078	
1721	jmp	anyway		offs:1715	
1722	get		r1080	r1	r1079
1723	print		r1080	r0	
1724	get		r1082	r1	r1081
1725	print		r1082	r0	
1726	arralloc		r1083	r0	
1727	set		r1083	r1049	r1053
1728	set		r1083	r1053	r876
1729	set		r1083	r876	r1074
1730	set		r1083	r1074	r1084
1731	set		r1083	r1084	r1085
1732	mov		r1086	r1083	
1733	pusharg		r1086	
1734	pusharg		r1089	
1735	call		r570	r2	
1736	pop		r1088	
1737	jmp	if false	r1088	offs:1742	
1738	print		r1088	r0	
1739	pusharg		r1088	
1740	call		r1088	r1	
1741	pop		r1088	
1742	jmp	anyway		offs:1736	
1743	mov		r1091	r1090	
1744	print		r1091	r0	
1745	get		r1093	r1091	r490
1746	pusharg		r1094	
1747	pusharg		r1053	
1748	pusharg		r1091	
1749	call		r1093	r3	
1750	pop		r1096	
1751	print		r1096	r0	
1752	get		r1097	r1091	r490
1753	pusharg		r1053	
1754	pusharg		r1049	
1755	pusharg		r1091	
1756	call		r1097	r3	
1757	pop		r1098	
1758	print		r1098	r0	
1759	get		r1100	r1	r1099
1760	pusharg		r876	
1761	pusharg		r1053	
1762	pusharg		r1	
1763	call		r1100	r3	
1764	pop		r1102	
1765	get		r1103	r1	r1099
1766	print		r1103	r0	
1767	print		r1102	r0	
1768	get		r1105	r1	r1104
1769	pusharg		r1	
1770	call		r1105	r1	
1771	pop		r1107	
1772	concat		r1109	r1108	r1107
1773	print		r1109	r0	
1774	get		r1111	r1107	r1110
1775	pusharg		r1053	
1776	pusharg		r1107	
1777	call		r1111	r2	
1778	pop		r1113	
1779	get		r1114	r1107	r1110
1780	pusharg		r1115	
1781	pusharg		r1107	
1782	call		r1114	r2	
1783	pop		r1116	
1784	print		r1107	r0	
1785	get		r1117	r1107	r41
1786	pusharg		r1107	
1787	call		r1117	r1	
1788	pop		r1119	
1789	pusharg		r1119	
1790	pusharg		r1089	
1791	call		r18	r2	
1792	pop		r1121	
1793	print		r1121	r0	
1794	pusharg		r1107	
1795	pusharg		r1089	
1796	call		r18	r2	
1797	pop		r1122	
1798	print		r1122	r0	
1799	get		r1124	r121	r1123
1800	pusharg		r1125	
1801	pusharg		r121	
1802	call		r1124	r2	
1803	pop		r1127	
1804	print		r1127	r0	
1805	get		r1128	r121	r1123
1806	pusharg		r1129	
1807	pusharg		r121	
1808	call		r1128	r2	
1809	pop		r1130	
1810	print		r1130	r0	
1811	math	+	r1131	r1127	r1130
1812	print		r1131	r0	
1813	math	*	r1132	r1127	r1130
1814	print		r1132	r0	
1815	get		r1134	r1	r1133
1816	pusharg		r1135	
1817	pusharg		r1	
1818	call		r1134	r2	
1819	pop		r1137	
1820	get		r1139	r1137	r1138
1821	print		r1139	r0	
1822	print		r1137	r0	
1823	hlt		
1824	hlt		

