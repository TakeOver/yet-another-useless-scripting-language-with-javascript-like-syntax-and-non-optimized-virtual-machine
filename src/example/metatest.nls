require std
class T {
        var _x;
        construct(x){
                @x=x;
        }
        function __get:x(){
                return @_x;
        }
        function __set:x(val){
                @_x = val;
        }
}
class F extends T{
        var _y;
        construct(x,y){
                @super(x);
                @y=y;
        }
        function __add(x,y){
                return new F(x.x+y.x,x.y+y.y);
        }
        function __equal(x,y){
                return x.x==y.x && x.y==y.y;
        }
        function __get:y(){
                return @_y;
        }
        function __set:y(val){
                @_y = val;
        }
        function Seriallize(){
                return '{"x":'..@x..',"y":'..@y.."}";
        }
        function Deseriallize(str){
                var obj = str.to_obj();
                @x=obj.x;
                @y=obj.y;
        }
        function __tostr(){
                return @Seriallize();
        }
}
var q = new F(1,2)
var w=new F(2,3);
var c = new F(1,2)
print q;
print w;
print q+w
print q==w;
print q==c;
print q is F
print q is T
print min(...[10,2,3,4,5,6,7]);
print [1,4,89,3,5,9,4].bubble_sort(|x,y|x>y).uniq().binary_search(4);
var s =new F();
s.Deseriallize("{'x':10,'y':9}");
print s;
print s.Seriallize();
class W extends Immutable{
        var _x;
        var _y;
        construct(x,y){
                @_x=x;
                @_y=y;
                @super();
        }
        function __get(what){
                if(what=="x")
                        return @_x;
                if(what=="y")
                        return @_y;
        }

}print NaN
print NaN == NaN
print Infinity
function meta(x,xs...){
        print x
        if(xs.length()>0)
                meta(...xs);
}
meta(1,2,3,...[4,5,6],7,...[8,9,0])
print [1,2,3,4,5,[5,6,8,9,0,[1,2,3,4,5,[1,2,3,4,5,6]]]].flat().uniq()
$OnException = function(ex,st){
        print st;
        print ex;
        return true;
}
function a (){
        throw {isUserdata:true}
}
function b(){
        a()
}
function c(){
b()
}
var name = c;
var asd = {
        callee = function(){
                name()
        }
}
asd.callee();